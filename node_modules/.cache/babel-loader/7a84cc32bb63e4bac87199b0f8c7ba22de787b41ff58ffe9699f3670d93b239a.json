{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect,useCallback}from'react';import wsService from'../services/WebSocketService';import{getCharacteristicUUID,getOperationFromUUID}from'../utils/characteristics';import{jsx as _jsx}from\"react/jsx-runtime\";const WebSocketContext=/*#__PURE__*/createContext(null);export function WebSocketProvider(_ref){let{children}=_ref;const[wsConnected,setWsConnected]=useState(false);const[connectionError,setConnectionError]=useState(null);const[connectedDevices,setConnectedDevices]=useState([]);const[deviceValues,setDeviceValues]=useState({});const[lockState,setLockState]=useState({isLocked:false,deviceIds:[]});const[connectionLogs,setConnectionLogs]=useState([]);const addLog=useCallback(function(message){let level=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'info';const timestamp=new Date().toISOString();setConnectionLogs(prevLogs=>[...prevLogs,{timestamp,message,level}]);console.log(\"[\".concat(timestamp,\"] \").concat(message));// Also log to console\n},[]);const sendCharacteristicOperation=(deviceId,operation,value)=>{if(wsConnected){addLog(\"Sending operation \".concat(operation,\" to device \").concat(deviceId),'info');wsService.send({type:'characteristicChanged',deviceId,characteristicUUID:getCharacteristicUUID(operation),value:Array.isArray(value)?value:[value]});}else{addLog(\"Cannot send operation - WebSocket not connected\",'error');}};const lockDevices=deviceIds=>{if(wsConnected){addLog(\"Locking devices: \".concat(deviceIds.join(', ')),'info');wsService.send({type:'lockDevices',isLocked:true,deviceIds});}else{addLog(\"Cannot lock devices - WebSocket not connected\",'error');}};const unlockDevices=()=>{if(wsConnected){addLog('Unlocking all devices','info');wsService.send({type:'lockDevices',isLocked:false,deviceIds:[]});}else{addLog(\"Cannot unlock devices - WebSocket not connected\",'error');}};const handleMessage=useCallback(message=>{console.log('[WebSocketContext] Handling message:',message.type,message);switch(message.type){case'connected':setWsConnected(true);console.log('[WebSocketContext] WebSocket connected');break;case'disconnected':setWsConnected(false);console.log('[WebSocketContext] WebSocket disconnected');break;case'devices':console.log('[WebSocketContext] Handling devices message:',message.devices);setConnectedDevices(message.devices);message.devices.forEach(device=>{// Convert string button states to numeric values for consistency\nlet buttonStateValue=0;if(device.buttonState!==undefined){const state=device.buttonState;if(state===1||state===true||state==='pressed'){buttonStateValue=1;}else if(state===0||state===false||state==='released'){buttonStateValue=0;}}console.log('[WebSocketContext] Updating device values for:',device.id,{buttonState:buttonStateValue,pressValue:device.pressValue||0,connected:device.connected});setDeviceValues(prev=>({...prev,[device.id]:{...prev[device.id],buttonState:buttonStateValue,pressValue:device.pressValue||0,connected:device.connected,batteryLevel:device.batteryLevel,color:device.color}}));});break;case'deviceData':console.log('[WebSocketContext] Handling deviceData message:',message);// Update the connected devices list with the new device data\nsetConnectedDevices(prevDevices=>{const existingDeviceIndex=prevDevices.findIndex(d=>d.id===message.id);if(existingDeviceIndex>=0){// Update existing device\nconst updatedDevices=[...prevDevices];updatedDevices[existingDeviceIndex]={...updatedDevices[existingDeviceIndex],...message};return updatedDevices;}else{// Add new device\nreturn[...prevDevices,message];}});break;case'deviceDisconnected':console.log('[WebSocketContext] Handling deviceDisconnected message:',message);// Remove the disconnected device from the list\nsetConnectedDevices(prevDevices=>{return prevDevices.filter(device=>{var _message$device;return device.id!==((_message$device=message.device)===null||_message$device===void 0?void 0:_message$device.id);});});break;case'buttonPress':// console.log('[WebSocketContext] ðŸŽ¯ Button press detected:', message);\nsetDeviceValues(prev=>({...prev,[message.deviceId]:{...prev[message.deviceId],buttonState:1,pressValue:message.pressValue||0}}));break;case'buttonRelease':// console.log('[WebSocketContext] ðŸŽ¯ Button release detected:', message);\nsetDeviceValues(prev=>({...prev,[message.deviceId]:{...prev[message.deviceId],buttonState:0,pressValue:message.pressValue||0}}));break;case'buttonStateChanged':// console.log('[WebSocketContext] ðŸŽ¯ Button state changed:', message);\n// Convert string button states to numeric values for consistency\nlet buttonStateValue=0;if(message.buttonState||message.state){const state=message.buttonState||message.state;if(state===1||state===true||state==='pressed'){buttonStateValue=1;}else if(state===0||state===false||state==='released'){buttonStateValue=0;}}// console.log('[WebSocketContext] ðŸŽ¯ Processing button state change:', {\n//   deviceId: message.deviceId,\n//   originalState: message.buttonState || message.state,\n//   convertedState: buttonStateValue,\n//   pressValue: message.pressValue || 0,\n//   timestamp: new Date().toISOString()\n// });\nsetDeviceValues(prev=>{const newValues={...prev,[message.deviceId]:{...prev[message.deviceId],buttonState:buttonStateValue,pressValue:message.pressValue||0}};console.log('[WebSocketContext] ðŸŽ¯ Updated device values:',{deviceId:message.deviceId,newButtonState:newValues[message.deviceId].buttonState,newPressValue:newValues[message.deviceId].pressValue});return newValues;});break;case'error':console.error('[WebSocketContext] Error:',message.error);break;default:console.log('[WebSocketContext] Unhandled message type:',message.type);}},[wsService]);useEffect(()=>{// console.log('[WebSocketContext] Setting up WebSocket connection');\nlet mounted=true;// Connect to WebSocket\n// console.log('[WebSocketContext] Initiating WebSocket connection');\nwsService.connect();// Add message listener\n// console.log('[WebSocketContext] Adding message listener');\nconst removeListener=wsService.addListener(handleMessage);// Cleanup on unmount\nreturn()=>{// console.log('[WebSocketContext] Cleaning up WebSocket connection');\nmounted=false;removeListener();wsService.disconnect();};},[]);const value={wsConnected,connectionError,connectedDevices,deviceValues,lockState,connectionLogs,lockDevices,unlockDevices,sendCharacteristicOperation};return/*#__PURE__*/_jsx(WebSocketContext.Provider,{value:value,children:children});}export function useWebSocket(){const context=useContext(WebSocketContext);if(!context){throw new Error('useWebSocket must be used within a WebSocketProvider');}return context;}","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","wsService","getCharacteristicUUID","getOperationFromUUID","jsx","_jsx","WebSocketContext","WebSocketProvider","_ref","children","wsConnected","setWsConnected","connectionError","setConnectionError","connectedDevices","setConnectedDevices","deviceValues","setDeviceValues","lockState","setLockState","isLocked","deviceIds","connectionLogs","setConnectionLogs","addLog","message","level","arguments","length","undefined","timestamp","Date","toISOString","prevLogs","console","log","concat","sendCharacteristicOperation","deviceId","operation","value","send","type","characteristicUUID","Array","isArray","lockDevices","join","unlockDevices","handleMessage","devices","forEach","device","buttonStateValue","buttonState","state","id","pressValue","connected","prev","batteryLevel","color","prevDevices","existingDeviceIndex","findIndex","d","updatedDevices","filter","_message$device","newValues","newButtonState","newPressValue","error","mounted","connect","removeListener","addListener","disconnect","Provider","useWebSocket","context","Error"],"sources":["/Users/abinop/code/CosmoCode/cosmo-web-public/src/contexts/WebSocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport wsService from '../services/WebSocketService';\nimport { getCharacteristicUUID, getOperationFromUUID } from '../utils/characteristics';\n\nconst WebSocketContext = createContext(null);\n\nexport function WebSocketProvider({ children }) {\n  const [wsConnected, setWsConnected] = useState(false);\n  const [connectionError, setConnectionError] = useState(null);\n  const [connectedDevices, setConnectedDevices] = useState([]);\n  const [deviceValues, setDeviceValues] = useState({});\n  const [lockState, setLockState] = useState({ isLocked: false, deviceIds: [] });\n  const [connectionLogs, setConnectionLogs] = useState([]);\n\n  const addLog = useCallback((message, level = 'info') => {\n    const timestamp = new Date().toISOString();\n    setConnectionLogs(prevLogs => [\n      ...prevLogs,\n      { timestamp, message, level },\n    ]);\n    console.log(`[${timestamp}] ${message}`); // Also log to console\n  }, []);\n\n  const sendCharacteristicOperation = (deviceId, operation, value) => {\n    if (wsConnected) {\n      addLog(`Sending operation ${operation} to device ${deviceId}`, 'info');\n      wsService.send({\n        type: 'characteristicChanged',\n        deviceId,\n        characteristicUUID: getCharacteristicUUID(operation),\n        value: Array.isArray(value) ? value : [value]\n      });\n    } else {\n      addLog(`Cannot send operation - WebSocket not connected`, 'error');\n    }\n  };\n\n  const lockDevices = (deviceIds) => {\n    if (wsConnected) {\n      addLog(`Locking devices: ${deviceIds.join(', ')}`, 'info');\n      wsService.send({\n        type: 'lockDevices',\n        isLocked: true,\n        deviceIds\n      });\n    } else {\n      addLog(`Cannot lock devices - WebSocket not connected`, 'error');\n    }\n  };\n\n  const unlockDevices = () => {\n    if (wsConnected) {\n      addLog('Unlocking all devices', 'info');\n      wsService.send({\n        type: 'lockDevices',\n        isLocked: false,\n        deviceIds: []\n      });\n    } else {\n      addLog(`Cannot unlock devices - WebSocket not connected`, 'error');\n    }\n  };\n\n  const handleMessage = useCallback((message) => {\n    console.log('[WebSocketContext] Handling message:', message.type, message);\n\n    switch (message.type) {\n      case 'connected':\n        setWsConnected(true);\n        console.log('[WebSocketContext] WebSocket connected');\n        break;\n\n      case 'disconnected':\n        setWsConnected(false);\n        console.log('[WebSocketContext] WebSocket disconnected');\n        break;\n\n      case 'devices':\n        console.log('[WebSocketContext] Handling devices message:', message.devices);\n        setConnectedDevices(message.devices);\n        message.devices.forEach(device => {\n          // Convert string button states to numeric values for consistency\n          let buttonStateValue = 0;\n          if (device.buttonState !== undefined) {\n            const state = device.buttonState;\n            if (state === 1 || state === true || state === 'pressed') {\n              buttonStateValue = 1;\n            } else if (state === 0 || state === false || state === 'released') {\n              buttonStateValue = 0;\n            }\n          }\n          \n          console.log('[WebSocketContext] Updating device values for:', device.id, {\n            buttonState: buttonStateValue,\n            pressValue: device.pressValue || 0,\n            connected: device.connected\n          });\n          \n          setDeviceValues(prev => ({\n            ...prev,\n            [device.id]: {\n              ...prev[device.id],\n              buttonState: buttonStateValue,\n              pressValue: device.pressValue || 0,\n              connected: device.connected,\n              batteryLevel: device.batteryLevel,\n              color: device.color\n            }\n          }));\n        });\n        break;\n\n      case 'deviceData':\n        console.log('[WebSocketContext] Handling deviceData message:', message);\n        // Update the connected devices list with the new device data\n        setConnectedDevices(prevDevices => {\n          const existingDeviceIndex = prevDevices.findIndex(d => d.id === message.id);\n          if (existingDeviceIndex >= 0) {\n            // Update existing device\n            const updatedDevices = [...prevDevices];\n            updatedDevices[existingDeviceIndex] = { ...updatedDevices[existingDeviceIndex], ...message };\n            return updatedDevices;\n          } else {\n            // Add new device\n            return [...prevDevices, message];\n          }\n        });\n        break;\n\n      case 'deviceDisconnected':\n        console.log('[WebSocketContext] Handling deviceDisconnected message:', message);\n        // Remove the disconnected device from the list\n        setConnectedDevices(prevDevices => {\n          return prevDevices.filter(device => device.id !== message.device?.id);\n        });\n        break;\n\n      case 'buttonPress':\n        // console.log('[WebSocketContext] ðŸŽ¯ Button press detected:', message);\n        setDeviceValues(prev => ({\n          ...prev,\n          [message.deviceId]: {\n            ...prev[message.deviceId],\n            buttonState: 1,\n            pressValue: message.pressValue || 0\n          }\n        }));\n        break;\n\n      case 'buttonRelease':\n        // console.log('[WebSocketContext] ðŸŽ¯ Button release detected:', message);\n        setDeviceValues(prev => ({\n          ...prev,\n          [message.deviceId]: {\n            ...prev[message.deviceId],\n            buttonState: 0,\n            pressValue: message.pressValue || 0\n          }\n        }));\n        break;\n\n      case 'buttonStateChanged':\n        // console.log('[WebSocketContext] ðŸŽ¯ Button state changed:', message);\n        // Convert string button states to numeric values for consistency\n        let buttonStateValue = 0;\n        if (message.buttonState || message.state) {\n          const state = message.buttonState || message.state;\n          if (state === 1 || state === true || state === 'pressed') {\n            buttonStateValue = 1;\n          } else if (state === 0 || state === false || state === 'released') {\n            buttonStateValue = 0;\n          }\n        }\n        \n        // console.log('[WebSocketContext] ðŸŽ¯ Processing button state change:', {\n        //   deviceId: message.deviceId,\n        //   originalState: message.buttonState || message.state,\n        //   convertedState: buttonStateValue,\n        //   pressValue: message.pressValue || 0,\n        //   timestamp: new Date().toISOString()\n        // });\n        \n        setDeviceValues(prev => {\n          const newValues = {\n            ...prev,\n            [message.deviceId]: {\n              ...prev[message.deviceId],\n              buttonState: buttonStateValue,\n              pressValue: message.pressValue || 0\n            }\n          };\n          console.log('[WebSocketContext] ðŸŽ¯ Updated device values:', {\n            deviceId: message.deviceId,\n            newButtonState: newValues[message.deviceId].buttonState,\n            newPressValue: newValues[message.deviceId].pressValue\n          });\n          return newValues;\n        });\n        break;\n\n      case 'error':\n        console.error('[WebSocketContext] Error:', message.error);\n        break;\n\n      default:\n        console.log('[WebSocketContext] Unhandled message type:', message.type);\n    }\n  }, [wsService]);\n\n  useEffect(() => {\n    // console.log('[WebSocketContext] Setting up WebSocket connection');\n    let mounted = true;\n\n    // Connect to WebSocket\n    // console.log('[WebSocketContext] Initiating WebSocket connection');\n    wsService.connect();\n\n    // Add message listener\n    // console.log('[WebSocketContext] Adding message listener');\n    const removeListener = wsService.addListener(handleMessage);\n\n    // Cleanup on unmount\n    return () => {\n      // console.log('[WebSocketContext] Cleaning up WebSocket connection');\n      mounted = false;\n      removeListener();\n      wsService.disconnect();\n    };\n  }, []);\n\n  const value = {\n    wsConnected,\n    connectionError,\n    connectedDevices,\n    deviceValues,\n    lockState,\n    connectionLogs,\n    lockDevices,\n    unlockDevices,\n    sendCharacteristicOperation,\n  };\n\n  return (\n    <WebSocketContext.Provider value={value}>\n      {children}\n    </WebSocketContext.Provider>\n  );\n}\n\nexport function useWebSocket() {\n  const context = useContext(WebSocketContext);\n  if (!context) {\n    throw new Error('useWebSocket must be used within a WebSocketProvider');\n  }\n  return context;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}