{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useMemo, useRef, useEffect } from 'react';\n\n// Available background tracks\nexport const BACKGROUND_TRACKS = [{\n  id: 'none',\n  name: 'No Background Music',\n  file: null\n}, {\n  id: 'brassbeat',\n  name: 'Brass Beat',\n  file: '/audios/brassbeat.mp3'\n}, {\n  id: 'hiphop',\n  name: 'Hip Hop',\n  file: '/audios/hiphop.mp3'\n}, {\n  id: 'urbancosmo',\n  name: 'Urban Cosmo',\n  file: '/audios/urbancosmo.mp3'\n}, {\n  id: 'peacelovesoul',\n  name: 'Peace Love Soul',\n  file: '/audios/peacelovesoul.mp3'\n}, {\n  id: 'funkycosmo',\n  name: 'Funky Cosmo',\n  file: '/audios/funkycosmo.mp3'\n}, {\n  id: 'acousticcosmo',\n  name: 'Acoustic Cosmo',\n  file: '/audios/acousticcosmo.mp3'\n}];\nexport default function useBackgroundMusic(selectedTrackId = 'none', isPlaying = false) {\n  _s();\n  const audioRef = useRef(null);\n  const isInitializedRef = useRef(false);\n\n  // Get the selected track\n  const selectedTrack = useMemo(() => {\n    return BACKGROUND_TRACKS.find(track => track.id === selectedTrackId) || BACKGROUND_TRACKS[0];\n  }, [selectedTrackId]);\n\n  // Initialize audio element\n  useEffect(() => {\n    if (selectedTrack.file && !audioRef.current) {\n      audioRef.current = new Audio(selectedTrack.file);\n      audioRef.current.loop = true;\n      audioRef.current.volume = 0.3; // Set volume to 30% to not overpower game sounds\n      isInitializedRef.current = true;\n    } else if (!selectedTrack.file && audioRef.current) {\n      // Clean up if switching to 'none'\n      audioRef.current.pause();\n      audioRef.current = null;\n      isInitializedRef.current = false;\n    }\n  }, [selectedTrack]);\n\n  // Play/pause based on isPlaying prop\n  useEffect(() => {\n    if (!audioRef.current || !selectedTrack.file) return;\n    if (isPlaying) {\n      audioRef.current.play().catch(error => {\n        console.error('[BackgroundMusic] Error playing track:', error);\n      });\n    } else {\n      audioRef.current.pause();\n    }\n  }, [isPlaying, selectedTrack.file]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (audioRef.current) {\n        audioRef.current.pause();\n        audioRef.current = null;\n      }\n    };\n  }, []);\n  const play = useCallback(() => {\n    if (audioRef.current && selectedTrack.file) {\n      audioRef.current.play().catch(error => {\n        console.error('[BackgroundMusic] Error playing track:', error);\n      });\n    }\n  }, [selectedTrack.file]);\n  const pause = useCallback(() => {\n    if (audioRef.current) {\n      audioRef.current.pause();\n    }\n  }, []);\n  const setVolume = useCallback(volume => {\n    if (audioRef.current) {\n      audioRef.current.volume = Math.max(0, Math.min(1, volume));\n    }\n  }, []);\n  return {\n    play,\n    pause,\n    setVolume,\n    selectedTrack,\n    isInitialized: isInitializedRef.current\n  };\n}\n_s(useBackgroundMusic, \"c/YoHfOZ7/3zmJKNQtbxM6UCo6g=\");","map":{"version":3,"names":["useCallback","useMemo","useRef","useEffect","BACKGROUND_TRACKS","id","name","file","useBackgroundMusic","selectedTrackId","isPlaying","_s","audioRef","isInitializedRef","selectedTrack","find","track","current","Audio","loop","volume","pause","play","catch","error","console","setVolume","Math","max","min","isInitialized"],"sources":["/Users/abinop/code/CosmoCode/cosmo-web-public/src/hooks/useBackgroundMusic.js"],"sourcesContent":["import { useCallback, useMemo, useRef, useEffect } from 'react';\n\n// Available background tracks\nexport const BACKGROUND_TRACKS = [\n  { id: 'none', name: 'No Background Music', file: null },\n  { id: 'brassbeat', name: 'Brass Beat', file: '/audios/brassbeat.mp3' },\n  { id: 'hiphop', name: 'Hip Hop', file: '/audios/hiphop.mp3' },\n  { id: 'urbancosmo', name: 'Urban Cosmo', file: '/audios/urbancosmo.mp3' },\n  { id: 'peacelovesoul', name: 'Peace Love Soul', file: '/audios/peacelovesoul.mp3' },\n  { id: 'funkycosmo', name: 'Funky Cosmo', file: '/audios/funkycosmo.mp3' },\n  { id: 'acousticcosmo', name: 'Acoustic Cosmo', file: '/audios/acousticcosmo.mp3' },\n];\n\nexport default function useBackgroundMusic(selectedTrackId = 'none', isPlaying = false) {\n  const audioRef = useRef(null);\n  const isInitializedRef = useRef(false);\n\n  // Get the selected track\n  const selectedTrack = useMemo(() => {\n    return BACKGROUND_TRACKS.find(track => track.id === selectedTrackId) || BACKGROUND_TRACKS[0];\n  }, [selectedTrackId]);\n\n  // Initialize audio element\n  useEffect(() => {\n    if (selectedTrack.file && !audioRef.current) {\n      audioRef.current = new Audio(selectedTrack.file);\n      audioRef.current.loop = true;\n      audioRef.current.volume = 0.3; // Set volume to 30% to not overpower game sounds\n      isInitializedRef.current = true;\n    } else if (!selectedTrack.file && audioRef.current) {\n      // Clean up if switching to 'none'\n      audioRef.current.pause();\n      audioRef.current = null;\n      isInitializedRef.current = false;\n    }\n  }, [selectedTrack]);\n\n  // Play/pause based on isPlaying prop\n  useEffect(() => {\n    if (!audioRef.current || !selectedTrack.file) return;\n\n    if (isPlaying) {\n      audioRef.current.play().catch(error => {\n        console.error('[BackgroundMusic] Error playing track:', error);\n      });\n    } else {\n      audioRef.current.pause();\n    }\n  }, [isPlaying, selectedTrack.file]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (audioRef.current) {\n        audioRef.current.pause();\n        audioRef.current = null;\n      }\n    };\n  }, []);\n\n  const play = useCallback(() => {\n    if (audioRef.current && selectedTrack.file) {\n      audioRef.current.play().catch(error => {\n        console.error('[BackgroundMusic] Error playing track:', error);\n      });\n    }\n  }, [selectedTrack.file]);\n\n  const pause = useCallback(() => {\n    if (audioRef.current) {\n      audioRef.current.pause();\n    }\n  }, []);\n\n  const setVolume = useCallback((volume) => {\n    if (audioRef.current) {\n      audioRef.current.volume = Math.max(0, Math.min(1, volume));\n    }\n  }, []);\n\n  return {\n    play,\n    pause,\n    setVolume,\n    selectedTrack,\n    isInitialized: isInitializedRef.current,\n  };\n} "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}