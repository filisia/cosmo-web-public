{"ast":null,"code":"// Map of operation names to UUIDs\nconst CHARACTERISTIC_UUIDS = {\n  READ_BUTTON_STATUS: '000015251212efde1523785feabcd123',\n  READ_SENSOR_VALUE: '000015251212efde1523785feabcd124',\n  READ_BATTERY_LEVEL: '000015251212efde1523785feabcd125',\n  READ_SERIAL_NUMBER: '000015251212efde1523785feabcd126',\n  READ_FIRMWARE_VERSION: '000015251212efde1523785feabcd127',\n  READ_HARDWARE_VERSION: '000015251212efde1523785feabcd128',\n  WRITE_COMMAND: '000015251212efde1523785feabcd129'\n};\n\n// Helper function to get UUID from operation name\nexport const getCharacteristicUUID = operationType => {\n  const uuid = CHARACTERISTIC_UUIDS[operationType];\n  if (!uuid) {\n    throw new Error(`Unknown characteristic operation: ${operationType}`);\n  }\n  return uuid;\n};\n\n// Helper function to get operation name from UUID\nexport const getOperationFromUUID = uuid => {\n  var _Object$entries$find;\n  const operation = (_Object$entries$find = Object.entries(CHARACTERISTIC_UUIDS).find(([_, value]) => value === uuid)) === null || _Object$entries$find === void 0 ? void 0 : _Object$entries$find[0];\n  if (!operation) {\n    throw new Error(`Unknown characteristic UUID: ${uuid}`);\n  }\n  return operation;\n};","map":{"version":3,"names":["CHARACTERISTIC_UUIDS","READ_BUTTON_STATUS","READ_SENSOR_VALUE","READ_BATTERY_LEVEL","READ_SERIAL_NUMBER","READ_FIRMWARE_VERSION","READ_HARDWARE_VERSION","WRITE_COMMAND","getCharacteristicUUID","operationType","uuid","Error","getOperationFromUUID","_Object$entries$find","operation","Object","entries","find","_","value"],"sources":["/Users/abinop/code/CosmoCode/cosmo-web-public/src/utils/characteristics.js"],"sourcesContent":["// Map of operation names to UUIDs\nconst CHARACTERISTIC_UUIDS = {\n  READ_BUTTON_STATUS: '000015251212efde1523785feabcd123',\n  READ_SENSOR_VALUE: '000015251212efde1523785feabcd124',\n  READ_BATTERY_LEVEL: '000015251212efde1523785feabcd125',\n  READ_SERIAL_NUMBER: '000015251212efde1523785feabcd126',\n  READ_FIRMWARE_VERSION: '000015251212efde1523785feabcd127',\n  READ_HARDWARE_VERSION: '000015251212efde1523785feabcd128',\n  WRITE_COMMAND: '000015251212efde1523785feabcd129'\n};\n\n// Helper function to get UUID from operation name\nexport const getCharacteristicUUID = (operationType) => {\n  const uuid = CHARACTERISTIC_UUIDS[operationType];\n  if (!uuid) {\n    throw new Error(`Unknown characteristic operation: ${operationType}`);\n  }\n  return uuid;\n};\n\n// Helper function to get operation name from UUID\nexport const getOperationFromUUID = (uuid) => {\n  const operation = Object.entries(CHARACTERISTIC_UUIDS)\n    .find(([_, value]) => value === uuid)?.[0];\n  \n  if (!operation) {\n    throw new Error(`Unknown characteristic UUID: ${uuid}`);\n  }\n  return operation;\n}; "],"mappings":"AAAA;AACA,MAAMA,oBAAoB,GAAG;EAC3BC,kBAAkB,EAAE,kCAAkC;EACtDC,iBAAiB,EAAE,kCAAkC;EACrDC,kBAAkB,EAAE,kCAAkC;EACtDC,kBAAkB,EAAE,kCAAkC;EACtDC,qBAAqB,EAAE,kCAAkC;EACzDC,qBAAqB,EAAE,kCAAkC;EACzDC,aAAa,EAAE;AACjB,CAAC;;AAED;AACA,OAAO,MAAMC,qBAAqB,GAAIC,aAAa,IAAK;EACtD,MAAMC,IAAI,GAAGV,oBAAoB,CAACS,aAAa,CAAC;EAChD,IAAI,CAACC,IAAI,EAAE;IACT,MAAM,IAAIC,KAAK,CAAE,qCAAoCF,aAAc,EAAC,CAAC;EACvE;EACA,OAAOC,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAME,oBAAoB,GAAIF,IAAI,IAAK;EAAA,IAAAG,oBAAA;EAC5C,MAAMC,SAAS,IAAAD,oBAAA,GAAGE,MAAM,CAACC,OAAO,CAAChB,oBAAoB,CAAC,CACnDiB,IAAI,CAAC,CAAC,CAACC,CAAC,EAAEC,KAAK,CAAC,KAAKA,KAAK,KAAKT,IAAI,CAAC,cAAAG,oBAAA,uBADrBA,oBAAA,CACwB,CAAC,CAAC;EAE5C,IAAI,CAACC,SAAS,EAAE;IACd,MAAM,IAAIH,KAAK,CAAE,gCAA+BD,IAAK,EAAC,CAAC;EACzD;EACA,OAAOI,SAAS;AAClB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}