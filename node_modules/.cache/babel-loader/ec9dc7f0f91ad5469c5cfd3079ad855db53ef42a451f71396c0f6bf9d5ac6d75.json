{"ast":null,"code":"// Map of operation names to UUIDs\nconst CHARACTERISTIC_UUIDS={READ_BUTTON_STATUS:'000015251212efde1523785feabcd123',READ_SENSOR_VALUE:'000015251212efde1523785feabcd124',READ_BATTERY_LEVEL:'000015251212efde1523785feabcd125',READ_SERIAL_NUMBER:'000015251212efde1523785feabcd126',READ_FIRMWARE_VERSION:'000015251212efde1523785feabcd127',READ_HARDWARE_VERSION:'000015251212efde1523785feabcd128',WRITE_COMMAND:'000015251212efde1523785feabcd129'};// Helper function to get UUID from operation name\nexport const getCharacteristicUUID=operationType=>{const uuid=CHARACTERISTIC_UUIDS[operationType];if(!uuid){throw new Error(\"Unknown characteristic operation: \".concat(operationType));}return uuid;};// Helper function to get operation name from UUID\nexport const getOperationFromUUID=uuid=>{var _Object$entries$find;const operation=(_Object$entries$find=Object.entries(CHARACTERISTIC_UUIDS).find(_ref=>{let[_,value]=_ref;return value===uuid;}))===null||_Object$entries$find===void 0?void 0:_Object$entries$find[0];if(!operation){throw new Error(\"Unknown characteristic UUID: \".concat(uuid));}return operation;};","map":{"version":3,"names":["CHARACTERISTIC_UUIDS","READ_BUTTON_STATUS","READ_SENSOR_VALUE","READ_BATTERY_LEVEL","READ_SERIAL_NUMBER","READ_FIRMWARE_VERSION","READ_HARDWARE_VERSION","WRITE_COMMAND","getCharacteristicUUID","operationType","uuid","Error","concat","getOperationFromUUID","_Object$entries$find","operation","Object","entries","find","_ref","_","value"],"sources":["/Users/abinop/code/CosmoCode/cosmo-web-public/src/utils/characteristics.js"],"sourcesContent":["// Map of operation names to UUIDs\nconst CHARACTERISTIC_UUIDS = {\n  READ_BUTTON_STATUS: '000015251212efde1523785feabcd123',\n  READ_SENSOR_VALUE: '000015251212efde1523785feabcd124',\n  READ_BATTERY_LEVEL: '000015251212efde1523785feabcd125',\n  READ_SERIAL_NUMBER: '000015251212efde1523785feabcd126',\n  READ_FIRMWARE_VERSION: '000015251212efde1523785feabcd127',\n  READ_HARDWARE_VERSION: '000015251212efde1523785feabcd128',\n  WRITE_COMMAND: '000015251212efde1523785feabcd129'\n};\n\n// Helper function to get UUID from operation name\nexport const getCharacteristicUUID = (operationType) => {\n  const uuid = CHARACTERISTIC_UUIDS[operationType];\n  if (!uuid) {\n    throw new Error(`Unknown characteristic operation: ${operationType}`);\n  }\n  return uuid;\n};\n\n// Helper function to get operation name from UUID\nexport const getOperationFromUUID = (uuid) => {\n  const operation = Object.entries(CHARACTERISTIC_UUIDS)\n    .find(([_, value]) => value === uuid)?.[0];\n  \n  if (!operation) {\n    throw new Error(`Unknown characteristic UUID: ${uuid}`);\n  }\n  return operation;\n}; "],"mappings":"AAAA;AACA,KAAM,CAAAA,oBAAoB,CAAG,CAC3BC,kBAAkB,CAAE,kCAAkC,CACtDC,iBAAiB,CAAE,kCAAkC,CACrDC,kBAAkB,CAAE,kCAAkC,CACtDC,kBAAkB,CAAE,kCAAkC,CACtDC,qBAAqB,CAAE,kCAAkC,CACzDC,qBAAqB,CAAE,kCAAkC,CACzDC,aAAa,CAAE,kCACjB,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,qBAAqB,CAAIC,aAAa,EAAK,CACtD,KAAM,CAAAC,IAAI,CAAGV,oBAAoB,CAACS,aAAa,CAAC,CAChD,GAAI,CAACC,IAAI,CAAE,CACT,KAAM,IAAI,CAAAC,KAAK,sCAAAC,MAAA,CAAsCH,aAAa,CAAE,CAAC,CACvE,CACA,MAAO,CAAAC,IAAI,CACb,CAAC,CAED;AACA,MAAO,MAAM,CAAAG,oBAAoB,CAAIH,IAAI,EAAK,KAAAI,oBAAA,CAC5C,KAAM,CAAAC,SAAS,EAAAD,oBAAA,CAAGE,MAAM,CAACC,OAAO,CAACjB,oBAAoB,CAAC,CACnDkB,IAAI,CAACC,IAAA,MAAC,CAACC,CAAC,CAAEC,KAAK,CAAC,CAAAF,IAAA,OAAK,CAAAE,KAAK,GAAKX,IAAI,GAAC,UAAAI,oBAAA,iBADrBA,oBAAA,CACwB,CAAC,CAAC,CAE5C,GAAI,CAACC,SAAS,CAAE,CACd,KAAM,IAAI,CAAAJ,KAAK,iCAAAC,MAAA,CAAiCF,IAAI,CAAE,CAAC,CACzD,CACA,MAAO,CAAAK,SAAS,CAClB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}